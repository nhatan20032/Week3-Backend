// <auto-generated />
using System;
using EFCorePracticeAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EFCorePracticeAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250521032100_Adđatabase")]
    partial class Adđatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EFCorePracticeAPI.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refreshtokens", (string)null);
                });

            modelBuilder.Entity("EFCorePracticeAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("EFCorePracticeAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .HasColumnType("text");

                    b.Property<string>("Passwordhash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("EFCorePracticeAPI.Models.Userrole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Roleid")
                        .HasColumnType("integer");

                    b.Property<int?>("Userid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Roleid");

                    b.HasIndex("Userid");

                    b.ToTable("userroles", (string)null);
                });

            modelBuilder.Entity("EFCorePracticeAPI.Models.RefreshToken", b =>
                {
                    b.HasOne("EFCorePracticeAPI.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFCorePracticeAPI.Models.Userrole", b =>
                {
                    b.HasOne("EFCorePracticeAPI.Models.Role", "Role")
                        .WithMany("Userroles")
                        .HasForeignKey("Roleid");

                    b.HasOne("EFCorePracticeAPI.Models.User", "User")
                        .WithMany("Userroles")
                        .HasForeignKey("Userid");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFCorePracticeAPI.Models.Role", b =>
                {
                    b.Navigation("Userroles");
                });

            modelBuilder.Entity("EFCorePracticeAPI.Models.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Userroles");
                });
#pragma warning restore 612, 618
        }
    }
}
